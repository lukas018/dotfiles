#+TITLE: Lukas' Doom Emacs Config
#+AUTHOR: Lukas Lundmark
#+EMAIL: lukas.lundmark@foi.se
#+DESCRIPTION: Lukas' personal Doom Emacs config.
#+STARTUP: showeverything
#+PROPERTY: header-args :results silent :tangle config.el

* TABLE OF CONTENTS :toc:
- [[#about-this-config][ABOUT THIS CONFIG]]
- [[#misc][MISC]]
  - [[#undo-tree-mode][Undo Tree Mode]]
  - [[#disable-line-numbers][Disable line numbers]]
  - [[#add-local-leaders][Add Local Leaders]]
  - [[#words-in-emacs][Words in Emacs]]
  - [[#auto-fill][AUTO-FILL]]
  - [[#which-key][WHICH-KEY]]
  - [[#ivy-preview-buffer][ivy-preview-buffer]]
- [[#bookmarks-and-buffers][BOOKMARKS AND BUFFERS]]
- [[#dired][DIRED]]
- [[#doom-theme][DOOM THEME]]
- [[#elfeed][ELFEED]]
- [[#evaluate-elisp-expressions][EVALUATE ELISP EXPRESSIONS]]
- [[#fonts][FONTS]]
- [[#ivy][IVY]]
- [[#line-settings][LINE SETTINGS]]
- [[#manpages][MANPAGES]]
- [[#mastodon][MASTODON]]
- [[#neotree][NEOTREE]]
- [[#open-specific-files][OPEN SPECIFIC FILES]]
- [[#registers][REGISTERS]]
- [[#shells][SHELLS]]
- [[#splits][SPLITS]]
- [[#winner-mode][WINNER MODE]]
- [[#pdf][PDF]]
- [[#frog-jump-buffer][FROG-JUMP-BUFFER]]
- [[#modified-window-splits][MODIFIED WINDOW SPLITS]]
- [[#telegram][Telegram]]
- [[#elfeed-1][Elfeed]]
- [[#misc-1][MISC]]
  - [[#extract-system-variables][Extract system variables]]
  - [[#let-tramp-use-remote-path][Let tramp use remote path]]
- [[#python-environemt][PYTHON ENVIRONEMT]]
- [[#other-languages][OTHER LANGUAGES]]
- [[#org-mode][ORG-MODE]]
  - [[#org-mode-configs][ORG-MODE-CONFIGS]]
  - [[#org-super-agenda][ORG-SUPER-AGENDA]]
  - [[#org-chef][ORG-CHEF]]
  - [[#org-tree-slide][ORG-TREE-SLIDE]]
  - [[#org-ref-and-general-reference-configuration][ORG-REF and GENERAL REFERENCE CONFIGURATION]]
  - [[#org-roam][ORG-ROAM]]
  - [[#org-transclusion][ORG-TRANSCLUSION]]
  - [[#org-mode-keybindings][ORG-MODE KEYBINDINGS]]
- [[#eaf][EAF]]

* ABOUT THIS CONFIG
This is my personal Doom Emacs config.  Doom Emacs is a distribution of Emacs that uses the "evil" keybindings (Vim keybindings) and includes a number of nice extensions and a bit of configuration out of the box.  I am maintaing this config not just for myself, but also for those that want to explore some of what is possible with Emacs.  I will add a lot of examples of plugins and settings, some of them I may not even use personally.  I do this because many people following me on YouTube look at my configs as "documentation".

* MISC
Here we do some very small quality of life fixes

** Undo Tree Mode
#+begin_src emacs-lisp :tangle yes
(global-undo-tree-mode t)
#+end_src

** Disable line numbers
Remove line numbers by default. These can be toggled back with *SPC t l*.
#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers nil)
#+end_src

** Add Local Leaders
We set control space to an extra leader.
#+begin_src emacs-lisp
(setq evil-snipe-override-evil-repeat-keys nil
      doom-localleader-key ","
      doom-localleader-alt-key "M-,")
#+end_src

** Words in Emacs

By default Emacs doesn't consider underscores to be word-characters. We change this to make evil-mode feel more like *vim*.
#+begin_src emacs-lisp
(modify-syntax-entry ?_ "w")
#+end_src

** AUTO-FILL
Auto-fill is a god-damn scourge. Lets disable it globally.

#+begin_src emacs-lisp
(turn-off-auto-fill)
#+end_src

** WHICH-KEY
    For some reason the doom mode-line sometimes covers the lower row of the which-key buffer (for certain settings).
    This hack fixes the problem to some extent by adding an extra line's worth of height to the which-key buffer.

#+begin_src emacs-lisp :tangle yes
;; Add an extra line to work around bug in which-key imprecise
(defun add-which-key-line (f &rest r) (progn (apply f (list (cons (+ 1 (car (car r))) (cdr (car r)))))))
(advice-add 'which-key--show-popup :around #'add-which-key-line)
#+end_src

** ivy-preview-buffer
#+begin_src emacs-lisp :tangle yes
(setq +ivy-buffer-preview t)
#+end_src

* BOOKMARKS AND BUFFERS
Doom Emacs uses 'SPC b' for keybindings related to bookmarks and buffers.  Bookmarks are somewhat like registers in that they record positions you can jump to.  Unlike registers, they have long names, and they persist automatically from one Emacs session to the next. The prototypical use of bookmarks is to record where you were reading in various files.  Regarding /buffers/, the text you are editing in Emacs resides in an object called a /buffer/. Each time you visit a file, a buffer is used to hold the file’s text. Each time you invoke Dired, a buffer is used to hold the directory listing.

#+begin_src emacs-lisp
(map! :leader
      :desc "List bookmarks"
      "b L" 'list-bookmarks
      :leader
      :desc "Save current bookmarks to bookmark file"
      "b w" 'bookmark-save)
#+end_src

* DIRED
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

#+begin_src emacs-lisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Dired open" "d" 'dired
       :desc "Dired jump to current" "j" 'dired-jump
       (:mode dired
        (:map dired-mode-map
         (:prefix ("n" . "narrow")
          :desc "Narrow (default)" "n" 'dired-narrow
          :desc "Narrow (regex)" "r" 'dired-narrow-regexp
          :desc "Narrow (fuzzy)" "f" 'dired-narrow-fuzzy)
         :desc "Peep-dired" "p" 'peep-dired
         :desc "Dired view file" "v" 'dired-view-file))))

#+end_src

Adds support for navigation when inspecting (peeping) files.
#+begin_src emacs-lisp
(evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
;; Idk why but these things seem necessary

(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src


Dired-subtree enables expanding directories. These keybindings attempts emulate org-mode's way of showing headlines.
#+begin_src emacs-lisp

;; Add support for inserting the sub-tree
(evil-define-key 'normal dired-mode-map (kbd "<tab>" ) 'dired-subtree-insert
  (kbd "<backtab>") 'dired-subtree-remove
  (kbd "C-<tab>") 'dired-subtree-cycle
  (kbd "C-c f") 'luklun/dired-subtree-insert-full-tree)

;; Idk why but these things seem necessary
(add-hook 'dired-subtree-hook 'evil-normalize-keymaps)
#+end_src

* DOOM THEME
Setting the theme to doom-one.  To try out new themes, I set a keybinding for counsel-load-theme with 'SPC h t'.

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-moonlight)

(map! :leader
      :desc "Load new theme"
      "h t" 'counsel-load-theme)
#+END_SRC


* ELFEED
An RSS newsfeed reader for Emacs.

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(elfeed-feeds
   (quote
    (("https://www.reddit.com/r/linux.rss" reddit linux)
     ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
     ("https://hackaday.com/blog/feed/" hackaday linux)
     ("https://opensource.com/feed" opensource linux)
     ("https://linux.softpedia.com/backend.xml" softpedia linux)
     ("https://itsfoss.com/feed/" itsfoss linux)
     ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
     ("https://www.phoronix.com/rss.php" phoronix linux)
     ("http://feeds.feedburner.com/d0od" omgubuntu linux)
     ("https://www.computerworld.com/index.rss" computerworld linux)
     ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
     ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
     ("https://betanews.com/feed" betanews linux)
     ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
     ("https://distrowatch.com/news/dwd.xml" distrowatch linux)))))
#+END_SRC

* EVALUATE ELISP EXPRESSIONS
Changing some keybindings from their defaults to better fit with Doom Emacs, and to avoid conflicts with my window managers which sometimes use the control key in their keybindings.  By default, Doom Emacs does not use 'SPC e' for anything, so I choose to use the format 'SPC e' plus 'key' for these (I also use 'SPC e' for 'eww' keybindings).

#+BEGIN_SRC emacs-lisp :tangle yes
(map! :leader
      (:prefix ("e" . "eval")
       :desc "Evaluate elisp in buffer" "b" 'eval-buffer
       :desc "Evaluate defun" "d" 'eval-defun
       :desc "Evaluate elisp expression" "e" 'eval-expression
       :desc "Evaluate last sexpressio" "l" 'eval-last-sexp
       :desc "Evaluate elisp in region"  "r" 'eval-region
       (:prefix ("o" . "org")
        :desc "Evaluate org subtree" "s" 'org-babel-execute-src-block
        :desc "Evaluate org buffer" "e" 'org-babel-execute-buffer
        :desc "Evaluate org code block" "b" 'org-babel-execute-src-block)))
#+END_SRC

* FONTS
Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance, like ‘for’ and ‘if’ in C.

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Source Code Pro" :size 12))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

#+END_SRC

* IVY
Ivy is a generic completion mechanism for Emacs.  By default, Doom Emacs does not use 'SPC v', so the format I use for these bindings is 'SPC v' plus 'key'.

#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix ("v" . "ivy")
       :desc "Ivy push view" "p" 'ivy-push-view
       :desc "Ivy switch view" "s" 'ivy-switch-view))

(map! :leader
      (:prefix ("o")
       :desc "Launch linux exe" "x" 'counsel-linux-app))
#+end_src

* LINE SETTINGS
I display-line-numbers-type set to 'relative so I have line numbers displayed similarly to vim.  Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t t' for toggle-truncate-lines.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
(map! :leader
      :desc "Toggle truncate lines"
      "t t" 'toggle-truncate-lines)
#+END_SRC

* MANPAGES

#+BEGIN_SRC emacs-lisp
(use-package! ox-groff)
#+END_SRC

* MASTODON
Mastodon.el is a mastodon client for Emacs.  Note that I wrapped my settings with (after! mastodon).  Without this, my settings for the mastodon instance that I use would be overwritten by the default settings for this module, which is "mastodon.social".

#+BEGIN_SRC emacs-lisp
(after! mastodon
  (setq mastodon-instance-url "https://mastodon.technology/"))
#+END_SRC

* NEOTREE
Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  Doom Emacs had no keybindings set for neotree.  Since Doom Emacs uses 'SPC t' for 'toggle' keybindings, I used 'SPC t n' for toggle-neotree.

#+BEGIN_SRC emacs-lisp
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
(after! doom-themes
  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "Toggle neotree file viewer"
      "t n" 'toggle-neotree)
#+END_SRC


* OPEN SPECIFIC FILES
Keybindings to open files that I work with all the time using the find-file command, which is the interactive file search that opens with 'C-x C-f' in GNU Emacs or 'SPC f f' in Doom Emacs.  These keybindings use find-file non-interactively since we specify exactly what file to open.  The format I use for these bindings is 'SPC /' plus 'key' since Doom Emacs does not use these keybindings.

#+BEGIN_SRC emacs-lisp
;; (map! :leader
;;       (:prefix-map ("/" . "specific files or dirs")
;;         (:prefix ("w" . "work-related")
;;           (:prefix ("a" . "asgard")
;;             :desc "Open Stylometric dir in Dired" "s" '(lambda () (interactive) (find-file "/mnt/hdd1/home/luklun/FOI/Data-Science-Group/Stylometric"))))))
;;           (:prefix ("m" . "mia")
;;             :desc "Open Cyber dir in Dired" "c" '(lambda () (interactive) (find-file "/mnt/hdd1/FOI/MIA/cyber"))))
;;         (:prefix ("d" . "doom-related")
;;           :desc "Edit doom config.org" "c" '(lambda () (interactive) (find-file "~/.doom.d/config.org"))
;;           :desc "Edit doom init.el" "i" '(lambda () (interactive) (find-file "~/.doom.d/init.el")))))
#+END_SRC


* REGISTERS
Emacs registers are compartments where you can save text, rectangles and positions for later use. Once you save text or a rectangle in a register, you can copy it into the buffer once or many times; once you save a position in a register, you can jump back to that position once or many times.  The default GNU Emacs keybindings for these commands (with the exception of counsel-register) involves 'C-x r' followed by one or more other keys.  I wanted to make this a little more user friendly, and since I am using Doom Emacs, I choose to replace the 'C-x r' part of the key chords with 'SPC r'.

| COMMAND                          | DESCRIPTION                        | KEYBINDING |
|----------------------------------+------------------------------------+------------|
| copy-to-register                 | /Copy to register/                 | SPC r c    |
| frameset-to-register             | /Frameset to register/             | SPC r f    |
| insert-register                  | /Insert contents of register/      | SPC r i    |
| jump-to-register                 | /Jump to register/                 | SPC r j    |
| list-registers                   | /List registers/                   | SPC r l    |
| number-to-register               | /Number to register/               | SPC r n    |
| counsel-register                 | /Interactively choose a register/  | SPC r r    |
| view-register                    | /View a register/                  | SPC r v    |
| window-configuration-to-register | /Window configuration to register/ | SPC r w    |
| increment-register               | /Increment register/               | SPC r +    |
| point-to-register                | /Point to register/                | SPC r SPC  |

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("r" . "registers")
       :desc "Copy to register" "c" 'copy-to-register
       :desc "Framset to register" "f" 'frameset-to-register
       :desc "Insert contents of register" "i" 'insert-register
       :desc "Jump to register" "j" 'jump-to-register
       :desc "Interactively choose a register" "i" 'counsel-register
       :desc "View a register" "v" 'view-register
       :desc "Window configuration to register" "w" 'window-configuration-to-register
       :desc "Increment register" "+" 'increment-register
       :desc "Point to register" "SPC" 'point-to-register))
#+END_SRC

* SHELLS
Settings for the various shells and terminal emulators within Emacs.
+ 'shell-file-name' -- sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.
+ 'eshell-aliases-file' -- sets an aliases file for the eshell.

#+BEGIN_SRC emacs-lisp
(setq shell-file-name "/usr/bin/fish"
      eshell-aliases-file "~/.doom.d/aliases")
#+END_SRC

* SPLITS
I set splits to default to opening on the right using 'prefer-horizontal-split'.  I set a keybinding for 'clone-indirect-buffer-other-window' for when I want to have the same document in two splits.  The text of the indirect buffer is always identical to the text of its base buffer; changes made by editing either one are visible immediately in the other.  But in all other respects, the indirect buffer and its base buffer are completely separate.  For example, I can fold one split but other will be unfolded.

#+BEGIN_SRC emacs-lisp
(defun prefer-horizontal-split ()
  (set-variable 'split-height-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
(add-hook 'markdown-mode-hook 'prefer-horizontal-split)
(map! :leader
      :desc "Clone indirect buffer other window"
      "b c" 'clone-indirect-buffer-other-window)
#+END_SRC

* WINNER MODE
Winner mode has been included with GNU Emacs since version 20.  This is a global minor mode and, when activated, it allows you to “undo” (and “redo”) changes in the window configuration with the key commands 'SCP w <left>' and 'SPC w <right>'.

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Winner redo"
      "w <right>" 'winner-redo
      :leader
      :desc "Winner undo"
      "w <left>" 'winner-undo)
#+END_SRC

* PDF
Dark-mode is a requirement for any pdf-reader!
#+BEGIN_SRC emacs-lisp
(after! pdf-view
  (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode))
#+END_SRC


* FROG-JUMP-BUFFER
#+begin_src emacs-lisp
(use-package! frog-jump-buffer
  :config
  (map! :leader
        :desc "Frog Buffer Jumper"
        "b j" 'frog-jump-buffer))
#+end_src

#+begin_src emacs-lisp
(defun split-window-prefer-horizonally (window)
  "If there's only one window (excluding any possibly active
minibuffer), then split the current window horizontally."
  (if (and (one-window-p t)
           (not (active-minibuffer-window)))
      (let ((split-height-threshold nil))
        (split-window-sensibly window))
    (split-window-sensibly window)))

(setq split-window-preferred-function 'split-window-prefer-horizonally)
#+end_src

* MODIFIED WINDOW SPLITS

By default emacs doesn't follow when a windows are split.
These wrappers fixes this, and also offers the option of providing a target buffer.
#+begin_src emacs-lisp
(defun +evil/vsplit-follow (&optional target)
  "Splits window vertically and moves to it and perform some action"
  (interactive)
  (evil-window-vsplit ())
  (balance-windows)
  (other-window 1)
  (if (functionp target) (funcall target)))

(defun +evil/split-follow (&optional target)
  "Splits window horizontally and move to it and prefroms some target"
  (interactive)
  (evil-window-split ())
  (balance-windows)
  (other-window 1)
  (if (functionp target) (funcall target)))

(defun +evil/split-follow-empty ()
  "Splits the current windows, moves to it and opens the scratch buffer"
  (interactive)
  (+evil/split-follow '(lambda () (switch-to-buffer "*scratch*"))))

(defun +evil/vsplit-follow-empty ()
  "split"
  (interactive)
  (+evil/vsplit-follow '(lambda () (switch-to-buffer "*scratch*"))))

(defun +evil/split-follow-vterm ()
  "split"
  (interactive)
  (+evil/split-follow '(lambda () (+vterm/here ()))))

(defun +evil/vsplit-follow-vterm ()
  "split"
  (interactive)
  (+evil/vsplit-follow '(lambda () (+vterm/here ()))))

(defun +exwm/counsel-linux-app-action-open-new (desktop-shortcut)
  "Launch DESKTOP-SHORTCUT."
  (interactive)
  (+evil/vsplit-follow-empty)
  (call-process "gtk-launch" nil 0 nil (cdr desktop-shortcut)))


(defun +exwm/counsel-linux-app-new-window (&optional arg)
  "Launch a Linux desktop application in a new buffer, similar to Alt-<F2>.
When ARG is non-nil, ignore NoDisplay property in *.desktop files."
  (interactive "P")
  (ivy-read "Run a command: " (counsel-linux-apps-list)
            :predicate (unless arg (lambda (x) (get-text-property 0 'visible (car x))))
            :action #'+exwm/counsel-linux-app-action-open-new
            :caller 'counsel-linux-app))

;; Replace the default splits functionality
(map! :leader
      :desc "Split vertically and follow"
      "w v" '+evil/vsplit-follow
      :desc  "Split horizontally and follow with vterm"
      "w s" '+evil/split-follow
      :desc "Split vertically, open scratch and follow"
      "w V" '+evil/vsplit-follow-empty
      :desc  "Split horizontally, open scratch and follow"
      "w S" '+evil/split-follow-empty)

;; And for vterm too
(map! :leader
      :desc "Open vterm in new vertical window"
      "o s" '+evil/split-follow-vterm
      :desc "Open vterm in new horizontal window"
      "o v" '+evil/vsplit-follow-vterm)
#+end_src

* Telegram
    #+begin_src emacs-lisp
(use-package! telega
  :commands telega
  :config
  (setq telega-use-tracking-for nil))
    #+end_src


* Elfeed

#+begin_src emacs-lisp
(use-package! elfeed
  :commands elfeed
  :config
  (setq elfeed-feeds
        '("https://nullprogram.com/feed/"
          "https://ambrevar.xyz/atom.xml"
          "https://guix.gnu.org/feeds/blog.atom"
          "https://valdyas.org/fading/feed/"
          "https://www.reddit.com/r/emacs/.rss"
          "https://nitter.net/chris_af_VP/rss"
          "https://nitter.net/hanifbali/rss"
          "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA"
          "https://www.youtube.com/feeds/videos.xml?channel_id=UCVls1GmFKf6WlTraIb_IaJg")))
#+end_src


* MISC
** Extract system variables
#+begin_src emacs-lisp
(use-package! exec-path-from-shell
  :config
  (setq exec-path-from-shell-arguments nil)
  ;; Load the
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  ;; Load the shell path when running as a daemon
  (when (daemonp)
    (exec-path-from-shell-initialize)))
#+end_src


** Let tramp use remote path
#+begin_src emacs-lisp
;; (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+end_src

* PYTHON ENVIRONEMT
#+begin_src emacs-lisp
(use-package! pyvenv
  :config
  (pyvenv-mode t)
  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))

#+end_src


# Python LSP over tramp
# #+begin_src emacs-lisp
# ;; Use the microsoft server because it is faster
# (use-package! lsp-python-ms
#   :init (setq lsp-python-ms-auto-install-server t)
#   :hook (python-mode . (lambda ()
#                          (require 'lsp-python-ms)
#                          (lsp))))  ; or lsp-deferred

# (lsp-register-client
#  (make-lsp-client :new-connection (lsp-tramp-connection "pyls")
#                   :major-modes '(python-mode)
#                   :remote? t
#                   :server-id 'pyls-remote))

# #+end_src


* OTHER LANGUAGES
Add support for Vue development
#+begin_src emacs-lisp
(use-package! vue-mode)
#+End_src

* ORG-MODE

** ORG-MODE-CONFIGS
Initializes some additional org-mode packages
There is probably a better way to do this

#+begin_src emacs-lisp :tangle yes

;; Search between headings in all org-files
(use-package! helm-org-rifle
  :config
  (map! (:map org-mode-map
               :localleader
               "u s" #'helm-org-rifle))
  :after org)

;; Disable line-numbers when going into org-mode
(add-hook! org-mode (setq display-line-numbers nil))

;; Enables easy search of recent headings in all org-files
(use-package! org-recent-headings
  :after org
  :config
  (map! (:map org-mode-map
               :localleader
               "u r" #'org-recent-headings))
  :hook (org-mode . org-recent-headings-mode))

;; Show current heading at the top of the file
(use-package! org-sticky-header
  :config
  (setq org-sticky-header-full-path 'reversed)
  :hook (org-mode . org-sticky-header-mode))

;; Pretty heading decorator
(use-package! org-bullets
  :hook (org-mode . org-bullets-mode))

;; Adds support for bookmarking headers
(use-package! org-bookmark-heading
  :after org)

;; Download
(use-package! org-protocol-capture-html
  :after org)

(use-package! org-fragtog
  :hook (org-mode . org-fragtog-mode))

(use-package! org-web-tools)
#+end_src

** ORG-SUPER-AGENDA
#+begin_src emacs-lisp :tangle yes
(use-package! org-super-agenda
  :config
  (setq org-super-agenda-groups
        '(;; Each group has an implicit boolean OR operator between its selectors.

          (:name "Important"
           ;; Single arguments given alone
           :tag "bill"
           :priority "A")

          (:name "Work"  ; Optionally specify section name
           :tag "work"
           :tag "aibks"
           :tag "aina"
           :tag "mia")  ; Items that have this TODO keyword

          (:name "Domestic related things"
           :tag "home"
           :tag "clean") ;; Group together everything related to home

          (:name "Clocked Today"
           :log t) ;; Group together everything related to home

          (:name "Training"
           ;; Training things
           :tag ("gym" "run"))

          (:name "Hobby"
           :tag ("workstation" "build"))
          ;; Set order of multiple groups at once
          (:order-multi (2 (:name "Shopping online"
                            ;; Boolean AND group matches items that match all subgroups
                            :and (:tag "buy" :tag "online"))

                           (:name "Food-related"
                            ;; Multiple args given in list with implicit OR
                            :tag "cook")))
          ;; Groups supply their own section names when none are given
          (:todo "WAITING" :order 8)  ; Set order of this section
          (:todo ("SOMEDAY" "READING" "WATCHING")
           ;; Show this group at the end of the agenda (since it has the
           ;; highest number). If you specified this group last, items
           ;; with these todo keywords that e.g. have priority A would be
           ;; displayed in that group instead, because items are grouped
           ;; out in the order the groups are listed.
           :order 9)
          (:priority<= "B"
           ;; Show this section after "Today" and "Important", because
           ;; their order is unspecified, defaulting to 0. Sections
           ;; are displayed lowest-number-first.
           :order 1)
          ;; After the last group, the agenda will display items that didn't
          ;; match any of these groups, with the default order position of 99
          ))
  (setq org-super-agenda-header-map nil)
  :hook (org-mode . org-super-agenda-mode))

#+end_src

** ORG-CHEF
Let's add some capture templates for recipies
#+begin_src emacs-lisp :tangle yes
(use-package! org-chef
  :config
  ;; Since DOOM already adds some useful templates, lets push these ontop the existing ones
  (dolist (entry '(("c" "Cookbook" entry (file "~/org/cookbook.org")
                    "%(org-chef-get-recipe-from-url)"
                    :empty-lines 1)
                   ("m" "Manual Cookbook" entry (file "~/org/cookbook.org")
                    "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")))
                 (push entry org-capture-templates)))
#+end_src

Another thing I like to do is create a menu for the week.
Lets make it so we can easily iterate through our available recipes and incert a todo entry with a link to that recipe header.
#+begin_src emacs-lisp :tangle yes
(defun luklun/list-recipies (str pred _)
  (let ((headings '()))
    (org-map-entries
     (lambda ()
       (let ((level (nth 1 (org-heading-components)))
             (heading (nth 4 (org-heading-components))))
         (if (= level 1)
             (push (propertize heading 'property (concat "[[file:" (buffer-file-name) "::*" heading "][" heading "]]")) headings))))
     nil
     '("~/org/cookbook.org"))
    headings))

(defun find-candidates ()
  (interactive)
  (let (link)
    (ivy-read "Select a recipe"
            #'luklun/list-recipies
            :action #'(lambda(x) (setq link (get-text-property 0 'property x))))
    link))


(push '("d" "dinner entry" entry
        (file+headline "~/org/meals.org" "Dinner")
        "* TODO  %(call-interactively 'find-candidates) :cook:\n%i\n%^{chef}p\n%?" :prepend t)
    org-capture-templates)
#+end_src

#+begin_src emacs-lisp :tangle yes
(after! org
  ;; Disable Autofill Mode in Org Buffer
  (auto-fill-mode -1)

  ;; Open pdf-files from org in emacs instead of system default app
  (add-to-list 'org-file-apps '("\\.pdf\\'" . emacs))

  (push '("t" "Personal todo" entry
           (file+headline +org-capture-todo-file "Inbox")
           "* TODO %?\n%i\n%a" :prepend t)
        org-capture-templates)

  (setq
   org-clock-persist 'history
   org-clock-idle-time 5)
  (org-clock-persistence-insinuate)

  (setq org-directory "~/org/"
        org-agenda-files '("~/org/agenda.org")
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " ▼ "
        org-log-done 'time
        org-agenda-span 21
        org-journal-dir "~/org/journal/"
        org-journal-date-format "%B %d, %Y (%A)"
        org-journal-file-format "%Y-%m-%d.org"
        org-hide-emphasis-markers t)

  ;; ex. of org-link-abbrev-alist in action
  ;; [[arch-wiki:Name_of_Page][Description]]
  (setq org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
        '(("google" . "http://www.google.com/search?q=")
          ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
          ("ddg" . "https://duckduckgo.com/?q=")
          ("wiki" . "https://en.wikipedia.org/wiki/")))

  (setq org-todo-keywords       ; This overwrites the default Doom org-todo-keywords
        '((sequence
           "TODO(t)"            ; A task that is ready to be tackled
           "POSTPONED(p)"       ; Something is holding up this task
           "SOMEDAY(s)"         ; Do this someday
           "READING(r)"         ; Reading this things
           "WATCHING(w)"        ; Is currently watching
           "|"                  ; The pipe necessary to separate "active" states and "inactive" states
           "DONE(d)"           ; Task has been completed
           "CANCELLED(c)" ))) ; Task has been cancelled

  ;; Set tag list
  (setq org-tag-alist '((:startgrouptag)
                        ("work")
                        (:grouptags)
                        ("@work")
                        ("aina")
                        ("aikbs")
                        ("mia")
                        (:endgrouptag)
                        (:startgrouptag)
                        ("home")
                        (:grouptags)
                        ("@home")
                        ("cook")
                        ("clean")
                        ("buy")
                        ("bill")
                        (:endgrouptag)
                        (:startgrouptag)
                        ("hobby")
                        (:grouptags)
                        ("gym")
                        ("run")
                        ("read")
                        ("badminton")
                        ("code")
                        ("build")
                        ("workstation")
                        (:endgrouptag)
                        ("@online")
                        ("@bank")))

  )
#+end_src



** ORG-TREE-SLIDE
Org-tree-slide turns your org-file into a nice looking, interactive presentation.
The default configuration in Doom for org-tree-files is a bit wonky (at least to me).
Here we disable line-numbers and hide keywords when presentation starts, in order to clear the clutter a little bit.

#+begin_src emacs-lisp :tangle yes
(defun luklun/hide-all-keywords ()
  "Hide all keywords in the current org-mode buffer"
  (save-excursion
    (let (beg end ov)
      (goto-char (point-min))
      (while (re-search-forward "\\(^[ \t]*#\\+.+$\\)" nil t)
        (setq beg (match-beginning 1)
              end (match-end 1)
              ov  (make-overlay beg end))
        (overlay-put ov 'invisible t)))))

(defun luklun/show-all-keywords ()
  "show all hidden keywords in the current org-mode buffer"
  (save-excursion
    (let (beg end)
      (goto-char (point-min))
      (while (re-search-forward "\\(^[ \t]*#\\+.+$\\)" nil t)
        (setq beg (match-beginning 1)
              end (match-end 1))
        (dolist (o (overlays-in beg end))
          (delete-overlay o))))))
#+end_src

Create setup and teardown functions for the presentation
#+begin_src emacs-lisp :tangle yes
(defun luklun/presentation-setup ()
  (setq display-line-numbers nil)
  ;; (luklun/hide-all-keywords)
  ;; (hide-lines "#+")
  (hide-lines-matching "#+")
  (org-display-inline-images))

(defun luklun/presentation-teardown ()
  ;; (luklun/show-all-keywords)
  (hide-lines-show-all)
  )
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package! centered-window)

(use-package! org-tree-slide
  :commands org-tree-slide-mode
  :config
  ;; There is probably a better way of doing this
  (load! "modules/lang/org/autoload/contrib-present" doom-emacs-dir)
  (defvar +org-present-text-scale 5
    "The `text-scale-amount' for `org-tree-slide-mode'.")
  (org-tree-slide-simple-profile)
  (setq org-tree-slide-skip-outline-level 2
        org-tree-slide-modeline-display 'outside
        org-tree-slide-slide-in-effect t
        org-tree-slide-activate-message "Presentation started!"
        org-tree-slide-deactivate-message "Presentation finished!"
        org-tree-slide-breadcrumbs " > "
        org-image-actual-width nil
        org-tree-slide-heading-emphasis t)

  (add-hook 'org-tree-slide-mode-after-narrow-hook #'org-display-inline-images)
  (add-hook! 'org-tree-slide-mode-hook
             #'+org-present-hide-blocks-h
             #'+org-present-prettify-slide-h)

  (add-hook 'org-tree-slide-play-hook #'luklun/presentation-setup)
  (add-hook 'org-tree-slide-stop-hook #'luklun/presentation-teardown)

  (when (featurep! :editor evil)
    (map! :map org-tree-slide-mode-map
          :n [C-right] #'org-tree-slide-move-next-tree
          :n [C-left]  #'org-tree-slide-move-previous-tree
          :leader
          "t p" #'org-tree-slide-mode)
    (add-hook 'org-tree-slide-mode-hook #'evil-normalize-keymaps)))
#+end_src


** ORG-REF and GENERAL REFERENCE CONFIGURATION

Org-ref is a useful, albeight under documented way to manage citations, bibliographies and pdf-downloads.

*** ORG-REF
#+begin_src emacs-lisp :tangle yes
(use-package! org-ref
  :config
  ;; (org-ref-ivy-cite-completion)
  (setq org-ref-bibliography-notes "~/org/ref/notes.org"
        org-ref-default-bibliography '("~/org/ref/references.bib")
        org-ref-pdf-directory "~/org/ref/bibtex-pdf/"
        biblio-download-directory "~/org/ref/bibtex-pdf/"
        bibtex-completion-pdf-open-function 'org-open-file))
#+end_src


*** HELM-BIBTEX
#+begin_src emacs-lisp :tangle yes

(use-package! helm-bibtex
  :config
  (setq bibtex-completion-bibliography '("~/org/ref/references.bib")))
#+end_src

*** ORG-ROAM-BIBTEX
#+begin_src emacs-lisp :tangle yes
(use-package! org-roam-bibtex
  :after org-roam
  :config
  (setq orb-templates
    '(("r" "ref" plain (function org-roam-capture--get-point) ""
      :file-name "${citekey}"
      :head "#+title: ${title}\n#+roam_key: ${ref}\n"
      :unnarrowed t)))
  :hook (org-roam-mode . org-roam-bibtex-mode))
#+end_src



*** Exporting Roam Connected Components as a WIKI, bundling relevant image information with it.
#+begin_src emacs-lisp :tangle no

(defun luklun/compile-cite-keys (file)
  "Extract all the org-ref cite-keys used in file"
  (with-temp-buffer
    (insert-file-contents file)
    (goto-char 1)
    (let ((keys '()))
      (org-element-map (org-ref-parse-buffer) 'link
        (lambda (link)
          (let ((plist (nth 1 link)))
            (when (-contains? org-ref-cite-types
                              (plist-get plist :type))
              (cl-dolist (key (org-ref-split-and-strip-string
                               (plist-get plist :path)))
                (push key keys))))))
      keys)))

(luklun/compile-keys "/home/luklun/org/roam/girshick15_fast_r_cnn.org")
(setq data (cl-sort data 'string-lessp :key 'downcase))

(defun luklun/compile-citations (files)
  "Compile a list of bibtex entries mentioned in files"
  (cl-sort
   (delete-dups (apply 'append (mapcar 'luklun/compile-keys files)))
   'string-lessp
   :key 'downcase))

(defun luklun/create-bibtex (keys)
  "Create bibtex string from a list of cite-keys"
    (s-join "\n" (--map (bibtex-completion-make-bibtex it) keys)))

(defun luklun/export-bibtex (keys target-path)
  "Export the relevant bibtex entries references in the list of files to target-path"
  (write-region (luklun/create-bibtex keys) nil (concat target-path "reference.bib")))

(defun luklun/export-pdfs (keys target-path)
  "Export the relevant pdfs files"
  (dolist (key keys)
    (copy-file
     (concat org-ref-pdf-directory key ".pdf")
     (concat target-path key ".pdf") t)))

(defun luklun/export-org-files (files target)
  "Export the relevant files to target folder"
  (dolist (file files)
    (message file)
    (copy-file file (concat target (file-name-nondirectory file)) t)))

(defun luklun/export-wiki (&optional file)
  ;; (when (not (file))
  ;;   (setq file (buffer-file-name)))

  (let* ((files (org-roam-db--connected-component file))
         (keys (luklun/compile-citations files))
         (target-path "~/Downloads/test/"))

    (luklun/export-org-files files target-path)
    (message "done with org")
    (luklun/export-bibtex keys target-path)
    (message "done with bibtex")
    (luklun/export-pdfs keys (concat target-path "pdfs/"))
                        ))

(luklun/export-wiki "/home/luklun/org/roam/girshick15_fast_r_cnn.org")
#+end_src

#+begin_src emacs-lisp :tangle yes

#+end_src


** ORG-ROAM
#+begin_src emacs-lisp :tangle yes

(defun luklun/format-filename (title)
  (setq title (downcase title))
  (replace-regexp-in-string " " "_" title))

(after! org-roam
  (setq org-roam-buffer-position 'right)
  (setq org-roam-capture-templates
        '(("r" "research" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "%(luklun/format-filename \"${title}\")"
           :head "#+title: ${title}\n"
           :unnarrowed t))
        ))
#+end_src

** ORG-TRANSCLUSION
#+begin_src emacs-lisp :tangle yes
(use-package org-transclusion
  :after org
  :config
  (define-key global-map (kbd "<f12>") #'org-transclusion-mode))
#+end_src

** ORG-MODE KEYBINDINGS

Add some useful key mappings
#+begin_src emacs-lisp :tangle yes
(map! (:map org-mode-map
       :localleader
       ;; Ways to execute org-mode source blocks
       (:prefix ("j" . "evaluate")
        :desc "Evaluate org subtree" "s" 'org-babel-execute-src-block
        :desc "Evaluate org buffer" "e" 'org-babel-execute-buffer
        :desc "Evaluate org code block" "b" 'org-babel-execute-src-block)

       ;; Org-reference
       (:prefix ("u" . "org-ref")
        :desc "Insert reference" "i" 'org-ref-insert-link
        :desc "Org-rifle" "s" 'helm-org-rifle
        :desc "Format current src block" "TAB" 'luklun/org-format-block
        :desc "Format all src block" "f" 'luklun/org-format-all-blocks)))

#+end_src

* EAF
#+begin_src emacs-lisp :tangle yes
;; (use-package! eaf
;;   :config
;;   (require 'eaf-evil)
;;   (setq eaf-evil-leader-keymap  doom-leader-map)
;;   (setq eaf-evil-leader-key "SPC"))
#+end_src

#+begin_src emacs-lisp :tangle yes

(defun luklun/get-link()
  (interactive)
  (message "Hello %s" (nth 4 (org-heading-components)))
  (org-next-link)
  (message "Moved to %s" (nth 4 (org-heading-components)))
  ;(org-open-at-point)
  (message "%s" (buffer-file-name)))

(defun luklun/extract-ingridients ()
    (org-ql-select
        '("~/org/meals.org")
        '(and '(TODO) '(tags "cook") (level 2))
        :action #'(lambda ()
                    (org-next-link)
                )
        ))
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq luklun/parse-tree (org-element-parse-buffer))
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq company-idle-delay 0)
#+end_src
